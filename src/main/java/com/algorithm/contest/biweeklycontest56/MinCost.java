package com.algorithm.contest.biweeklycontest56;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * https://leetcode-cn.com/problems/minimum-cost-to-reach-destination-in-time/
 *
 * 1928. 规定时间内到达终点的最小花费
 *
 * 一个国家有 n 个城市，城市编号为 0 到 n - 1 ，题目保证 所有城市 都由双向道路
 * 连接在一起 。道路由二维整数数组 edges 表示，其中 edges[i] = [xi, yi, timei] 表示城市 xi
 * 和 yi 之间有一条双向道路，耗费时间为 timei 分钟。两个城市之间可能会有多条耗费时间不同的道路，但是不会有道路两头连接着同一座城市。
 *
 * 每次经过一个城市时，你需要付通行费。通行费用一个长度为 n 且下标从
 * 0 开始的整数数组 passingFees 表示，其中 passingFees[j] 是你经过城市 j 需要支付的费用。
 *
 * 一开始，你在城市 0 ，你想要在 maxTime 分钟以内 （包含 maxTime 分钟）到达城市 n - 1 。旅行的 费用 为你经过的所有城市
 * 通行费之和 （包括 起点和终点城市的通行费）。
 *
 * 给你 maxTime，edges 和 passingFees ，请你返回完成旅行的 最小费用 ，如果无法在 maxTime 分钟以内完成旅行，请你返回 -1 。
 *
 *  
 *
 * 示例 1：
 *
 *
 *
 * 输入：maxTime = 30, edges =
 * [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees =
 * [5,1,2,20,20,3]
 * 输出：11
 * 解释：最优路径为 0 -> 1 -> 2 -> 5 ，总共需要耗费 30 分钟，需要支付 11 的通行费。
 * 示例 2：
 *
 *
 *
 * 输入：maxTime = 29, edges =
 * [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees =
 * [5,1,2,20,20,3]
 * 输出：48
 * 解释：最优路径为 0 -> 3 -> 4 -> 5 ，总共需要耗费 26 分钟，需要支付 48 的通行费。
 * 你不能选择路径 0 -> 1 -> 2 -> 5 ，因为这条路径耗费的时间太长。
 * 示例 3：
 *
 * 输入：maxTime = 25, edges =
 * [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees =
 * [5,1,2,20,20,3]
 * 输出：-1
 * 解释：无法在 25 分钟以内从城市 0 到达城市 5 。
 *  
 *
 * 提示：
 *
 * 1 <= maxTime <= 1000
 * n == passingFees.length
 * 2 <= n <= 1000
 * n - 1 <= edges.length <= 1000
 * 0 <= xi, yi <= n - 1
 * 1 <= timei <= 1000
 * 1 <= passingFees[j] <= 1000 
 * 图中两个节点之间可能有多条路径。
 * 图中不含有自环。
 *
 */
public class MinCost {

    public static void main(String[] args) {
        MinCost m = new MinCost();
        // int maxTime = 29;
        // int edges[][] = new int[][] { { 0, 1, 10 }, { 1, 2, 10 }, { 2, 5, 10 }, { 0,
        // 3, 1 }, { 3, 4, 10 }, { 4, 5, 15 } };
        // int passingFees[] = new int[] { 5, 1, 2, 20, 20, 3 };
        // System.out.println(m.minCost(maxTime, edges, passingFees));
        //
        int maxTime1 = 30;
        int edges1[][] = new int[][] { { 0, 1, 10 }, { 1, 2, 10 }, { 2, 5, 10 }, { 0, 3, 1 }, { 3, 4, 10 },
                { 4, 5, 15 } };
        int passingFees1[] = new int[] { 5, 1, 2, 20, 20, 3 };
        System.out.println(m.minCost(maxTime1, edges1, passingFees1));
        //
        // int maxTime2 = 25;
        // int edges2[][] = new int[][] { { 0,1,10}, {1,2,10}, {2,5,10}, {0,3,1},
        // {3,4,10}, {4,5,15 } };
        // int passingFees2[] = new int[] { 5,1,2,20,20,3 };
        // System.out.println(m.minCost(maxTime2, edges2, passingFees2));
        //
        // int maxTime3 = 500;
        // int edges3[][] = new int[][]{
        // {9,7,18},
        // {26,3,12},
        // {28,45,33},
        // {47,10,27},
        // {34,18,38},
        // {32,13,39},
        // {32,26,32},
        // {12,0,2},
        // {4,1,7},
        // {5,3,2},
        // {39,25,27},
        // {45,10,34},
        // {3,19,5},
        // {25,32,23},
        // {30,10,47},
        // {37,2,31}, {10,32,15}, {23,14,19}, {22,6,14}, {45,39,38}, {39,21,30},
        // {42,17,42}, {20,17,15}, {24,0,27}, {2,46,11}, {2,24,13}, {36,22,30},
        // {2,1,31}, {41,35,45}, {4,19,20}, {32,27,33}, {38,46,1}, {21,11,15},
        // {33,41,2}, {45,18,30}, {8,33,50}, {37,11,6}, {25,17,42}, {45,39,33},
        // {7,4,49}, {17,42,36}, {36,16,9}, {46,25,24}, {43,4,6}, {35,13,28}, {1,28,1},
        // {34,35,15}, {38,1,15}, {16,6,28}, {13,0,42}, {3,30,24}, {43,27,35}, {8,0,45},
        // {27,20,47}, {6,16,47}, {0,34,35}, {0,35,3}, {40,11,24}, {1,0,49}, {44,20,32},
        // {26,12,17}, {3,2,25}, {37,25,42}, {27,1,15}, {36,25,38}, {24,47,33},
        // {33,28,15}, {25,43,37}, {47,31,47}, {29,10,50}, {11,1,21}, {29,3,48},
        // {1,25,10}, {48,17,16}, {19,24,22}, {30,7,2}, {11,22,19}, {20,42,41},
        // {27,3,48}, {17,0,34}, {19,14,32}, {49,2,20}, {10,3,38}, {0,49,13}, {6,3,28},
        // {42,23,6}, {14,8,1}, {35,16,3}, {17,7,40}, {18,7,49}, {36,35,13}, {14,40,45},
        // {16,33,11}, {31,22,33}, {38,15,48}, {15,14,25}, {37,13,37}, {44,32,7},
        // {48,1,31}, {33,12,20}, {22,26,23}, {4,10,11}, {43,28,43}, {19,8,14},
        // {35,31,33}, {28,27,19}, {40,11,36}, {36,43,28}, {22,21,15}};
        // int passingFees3[] = new
        // int[]{199,505,107,961,682,400,304,517,512,18,334,627,893,412,922,289,19,161,206,879,336,831,577,802,139,348,440,219,273,691,99,858,389,955,561,353,937,904,858,704,548,497,787,546,241,67,743,42,87,137};
        // System.out.println(m.minCost(maxTime3, edges3, passingFees3));
        //
        //
        // int maxTime4 = 500;
        // int edges4[][] = new int[][]{{36,1,2}, {8,41,29}, {47,7,50}, {33,17,6},
        // {47,37,28}, {3,38,2}, {27,2,4}, {11,30,17}, {32,35,48}, {12,1,32}, {7,27,6},
        // {7,4,25}, {15,8,11}, {2,17,50}, {7,45,14}, {40,8,48}, {4,22,5}, {28,23,20},
        // {20,27,49}, {26,34,13}, {17,47,40}, {47,4,32}, {0,30,21}, {30,29,8},
        // {15,3,38}, {4,3,39}, {22,16,46}, {47,10,13}, {42,23,30}, {34,0,13},
        // {12,25,11}, {5,2,1}, {7,36,48}, {44,11,7}, {20,47,9}, {42,37,49}, {42,4,46},
        // {1,39,26}, {14,5,25}, {32,17,16}, {22,7,25}, {3,22,36}, {49,8,46}, {16,20,6},
        // {16,21,32}, {26,43,35}, {43,19,7}, {0,2,35}, {35,37,25}, {25,48,46},
        // {9,4,28}, {24,5,21}, {37,30,7}, {14,16,40}, {25,35,26}, {49,38,1},
        // {24,13,36}, {27,6,8}, {10,3,37}, {23,13,26}, {31,21,19}, {28,1,48},
        // {15,21,18}, {17,7,40}, {33,12,24}, {44,28,11}, {46,43,37}, {1,26,47},
        // {3,46,17}, {28,22,20}, {8,34,3}, {18,6,2}, {38,16,30}, {17,38,20},
        // {12,10,26}, {21,40,18}, {19,2,25}, {31,28,25}, {41,8,5}, {9,3,14}, {5,0,8},
        // {3,36,25}, {32,23,37}, {2,1,11}, {49,25,18}, {33,24,48}, {42,28,25},
        // {4,40,47}, {37,11,23}, {37,46,45}, {9,42,35}, {34,1,19}, {17,2,17},
        // {15,17,13}, {33,20,1}, {40,34,13}, {25,21,40}, {40,9,41}, {47,15,41},
        // {3,10,20}, {33,35,47}, {22,8,37}, {35,40,34}, {29,38,34}, {37,15,17},
        // {28,39,43}, {24,37,28}, {16,24,8}, {37,46,10}, {4,44,34}, {41,17,20},
        // {25,40,45}, {15,18,30}, {48,25,16}, {16,11,7}, {16,1,34}, {19,44,11},
        // {37,7,14}, {11,49,5}, {29,32,3}, {17,32,7}, {39,18,10}, {25,14,9}, {1,0,36},
        // {7,28,46}, {48,13,44}, {46,31,27}, {11,0,32}, {30,32,24}, {27,15,33},
        // {20,19,43}, {16,8,6}, {28,21,43}, {13,33,14}, {3,2,45}, {20,6,27},
        // {35,17,23}, {38,46,48}, {46,48,5}, {45,43,20}, {49,24,14}, {45,34,28},
        // {10,32,46}, {10,37,29}, {39,21,46}, {34,25,22}, {6,11,3}, {0,34,19},
        // {6,20,3}, {33,0,44}, {4,6,15}, {35,13,22}, {29,41,20}, {6,4,33}, {45,15,43},
        // {33,46,40}, {45,34,23}, {19,27,33}, {19,2,9}, {21,2,29}, {14,25,15},
        // {37,44,34}, {16,41,41}, {18,3,18}, {46,32,13}, {43,48,47}, {28,13,39},
        // {26,47,46}, {13,28,46}, {26,19,32}, {13,11,41}, {17,43,13}, {39,47,15},
        // {48,13,37}, {29,17,27}, {35,33,29}, {24,37,19}, {43,22,49}, {40,5,33},
        // {23,24,34}, {38,13,12}, {8,2,10}, {43,16,44}, {2,31,46}, {48,10,15},
        // {16,31,11}, {3,33,9}, {33,10,9}, {41,18,41}, {41,47,46}, {10,44,6},
        // {27,38,45}, {42,28,2}, {19,9,30}, {21,32,26}, {48,41,10}, {28,42,9},
        // {31,7,42}, {0,17,41}, {1,0,25}, {25,20,32}};
        // int passingFees4[] = new
        // int[]{45,308,835,819,667,547,322,428,306,327,362,280,334,767,767,533,514,9,539,125,153,325,937,745,334,804,336,587,71,463,287,492,466,935,373,950,760,994,390,836,911,948,81,945,593,821,58,138,50,537};
        // System.out.println(m.minCost(maxTime4, edges4, passingFees4));
        //
        // int maxTime5 = 46;
        // int edges5[][] = new int[][]{{30,29,8}, {5,2,1}, {49,8,46}, {21,2,29},
        // {3,10,20}, {2,17,50}, {28,22,20}, {25,14,9}, {43,48,47}, {28,13,39},
        // {30,32,24}, {0,2,35}, {48,25,16}, {9,3,14}, {39,21,46}, {43,22,49},
        // {15,21,18}, {5,0,8}, {10,32,46}, {22,7,25}, {17,2,17}, {24,5,21}, {1,26,47},
        // {17,38,20}, {4,40,47}, {33,17,6}, {14,16,40}, {49,25,18}, {16,11,7},
        // {37,46,45}, {3,36,25}, {11,49,5}, {31,7,42}, {21,32,26}, {16,8,6},
        // {37,46,10}, {28,21,43}, {19,27,33}, {17,32,7}, {20,19,43}, {35,40,34},
        // {47,15,41}, {34,1,19}, {15,3,38}, {17,43,13}, {40,5,33}, {45,15,43},
        // {37,15,17}, {42,23,30}, {26,43,35}, {48,41,10}, {17,47,40}, {32,35,48},
        // {9,4,28}, {41,8,5}, {25,21,40}, {8,34,3}, {7,36,48}, {25,48,46}, {46,48,5},
        // {8,2,10}, {34,25,22}, {29,41,20}, {1,0,25}, {2,1,11}, {41,47,46}, {13,33,14},
        // {48,13,44}, {14,25,15}, {48,13,37}, {0,34,19}, {47,37,28}, {25,35,26},
        // {4,3,39}, {9,42,35}, {7,4,25}, {29,38,34}, {33,10,9}, {32,17,16}, {41,17,20},
        // {12,25,11}, {14,5,25}, {12,10,26}, {10,3,37}, {4,22,5}, {6,4,33}, {24,37,28},
        // {19,2,9}, {44,11,7}, {40,8,48}, {18,3,18}, {3,22,36}, {43,16,44}, {16,1,34},
        // {3,46,17}, {49,24,14}, {46,32,13}, {42,28,2}, {19,2,25}, {16,21,32},
        // {44,28,11}, {16,24,8}, {15,18,30}, {17,7,40}, {11,30,17}, {25,40,45},
        // {11,0,32}, {47,10,13}, {20,6,27}, {1,39,26}, {38,16,30}, {37,11,23},
        // {37,44,34}, {4,44,34}, {1,0,36}, {42,37,49}, {13,28,46}, {40,34,13},
        // {15,17,13}, {37,7,14}, {45,43,20}, {0,17,41}, {16,20,6}, {33,0,44},
        // {29,17,27}, {24,37,19}, {16,31,11}, {45,34,23}, {13,11,41}, {23,13,26},
        // {33,20,1}, {27,2,4}, {36,1,2}, {33,24,48}, {31,21,19}, {22,16,46}, {22,8,37},
        // {6,11,3}, {40,9,41}, {12,1,32}, {35,33,29}, {31,28,25}, {49,38,1}, {2,31,46},
        // {37,30,7}, {27,38,45}, {26,34,13}, {10,37,29}, {47,7,50}, {46,31,27},
        // {23,24,34}, {46,43,37}, {28,23,20}, {42,4,46}, {10,44,6}, {3,38,2},
        // {32,23,37}, {25,20,32}, {27,15,33}, {41,18,41}, {7,45,14}, {33,12,24},
        // {28,42,9}, {6,20,3}, {39,18,10}, {35,13,22}, {7,27,6}, {48,10,15}, {43,19,7},
        // {3,33,9}, {16,41,41}, {0,30,21}, {35,17,23}, {18,6,2}, {38,46,48}, {34,0,13},
        // {38,13,12}, {39,47,15}, {24,13,36}, {19,44,11}, {28,39,43}, {33,46,40},
        // {7,28,46}, {26,19,32}, {47,4,32}, {20,27,49}, {21,40,18}, {35,37,25},
        // {15,8,11}, {26,47,46}, {28,1,48}, {29,32,3}, {45,34,28}, {20,47,9},
        // {8,41,29}, {3,2,45}, {27,6,8}, {4,6,15}, {19,9,30}, {42,28,25}, {33,35,47}};
        // int passingFees5[] = new
        // int[]{825,813,722,879,49,806,220,694,660,90,888,400,127,685,459,302,699,521,510,927,403,119,621,875,491,109,153,396,629,928,720,207,172,534,264,427,762,910,958,550,296,890,505,649,917,830,558,935,220,808};
        // System.out.println(m.minCost(maxTime5, edges5, passingFees5));
        // int maxTime6 = 500;
        // int edges6[][] = new int[][] {{16,7,34}, {46,34,42}, {24,2,8}, {23,16,48},
        // {7,0,22}, {37,39,50}, {12,11,15}, {14,25,18}, {31,25,3}, {4,9,17},
        // {21,23,23}, {5,45,39}, {15,40,15}, {8,27,6}, {19,11,43}, {12,16,25},
        // {26,0,45}, {18,6,23}, {47,11,36}, {10,40,14}, {49,10,36}, {36,8,28},
        // {6,13,37}, {20,40,39}, {32,3,1}, {48,6,23}, {4,41,38}, {27,10,19}, {43,8,20},
        // {13,38,28}, {37,18,46}, {45,34,3}, {34,12,36}, {20,17,50}, {43,18,42},
        // {23,19,39}, {28,27,36}, {42,8,36}, {35,11,1}, {33,20,13}, {9,7,21},
        // {11,6,38}, {38,41,33}, {14,5,42}, {1,0,24}, {17,9,32}, {3,24,7}, {10,9,17},
        // {3,20,19}, {19,49,43}, {0,11,27}, {23,41,5}, {4,7,11}, {43,40,5}, {5,1,5},
        // {30,5,20}, {15,10,30}, {20,15,12}, {39,27,44}, {31,3,6}, {17,7,19},
        // {44,31,31}, {5,14,3}, {42,1,25}, {15,12,33}, {36,26,27}, {24,4,41},
        // {2,40,47}, {24,15,12}, {14,1,45}, {29,17,40}, {14,48,47}, {14,30,16},
        // {46,27,40}, {11,5,40}, {48,8,7}, {41,16,49}, {6,35,18}, {39,47,28},
        // {18,19,26}, {46,6,33}, {4,25,11}, {49,27,10}, {20,48,27}, {39,29,45},
        // {40,45,42}, {43,25,31}, {30,28,11}, {18,42,22}, {40,18,26}, {19,46,20},
        // {1,19,18}, {26,47,34}, {46,12,5}, {48,29,15}, {10,1,9}, {2,1,34}, {35,24,13},
        // {7,9,42}, {43,9,26}, {34,25,44}, {27,30,26}, {42,1,29}, {22,12,22},
        // {23,46,32}, {36,43,18}, {42,43,38}, {13,40,49}, {30,34,36}, {42,28,16},
        // {34,18,44}, {48,20,49}, {35,10,31}, {44,12,6}, {49,18,8}, {32,36,28},
        // {41,5,28}, {42,25,48}, {1,26,3}, {41,29,14}, {47,13,15}, {15,43,42},
        // {32,27,27}, {35,36,30}, {8,21,13}, {19,48,21}, {30,35,20}, {21,34,30},
        // {3,1,20}, {18,48,7}, {14,47,38}, {41,33,9}, {14,36,29}, {9,3,17}, {43,33,36},
        // {26,28,3}, {36,32,50}, {44,28,18}, {15,34,36}, {13,5,40}, {33,24,10},
        // {3,26,25}, {18,36,16}, {32,8,35}, {17,34,34}, {31,0,39}, {27,28,38},
        // {28,14,25}, {28,39,14}, {21,42,10}, {18,49,9}, {19,4,26}, {30,40,1},
        // {27,40,45}, {20,32,11}, {24,12,41}, {24,18,3}, {24,6,28}, {24,10,11},
        // {21,30,34}, {6,30,30}, {1,11,50}, {39,29,29}, {21,9,6}, {27,12,14},
        // {11,25,4}, {38,9,25}, {42,48,15}, {29,22,17}, {26,43,50}, {25,13,2},
        // {16,33,31}, {34,5,23}, {48,27,15}, {44,7,37}, {18,48,41}, {28,37,24},
        // {5,26,20}, {24,49,2}, {37,7,47}, {20,29,44}, {31,19,15}, {10,12,34},
        // {45,37,46}, {41,4,21}, {33,21,13}, {27,26,27}, {23,19,40}, {42,16,2},
        // {29,34,19}, {14,1,29}, {22,21,38}, {44,31,48}, {19,6,29}, {8,10,41},
        // {12,40,40}, {48,18,50}, {29,14,30}, {37,19,6}, {0,23,41}, {42,30,22},
        // {13,20,37}, {16,28,49}, {2,34,42}, {21,48,14}, {34,17,16}, {37,35,19},
        // {1,17,8}, {16,44,36}, {17,14,26}, {25,6,5}, {46,19,31}, {14,13,40}, {35,2,6},
        // {41,17,25}, {0,35,40}, {21,10,38}, {39,42,26}, {42,36,7}, {29,16,19},
        // {10,0,35}, {5,32,27}, {27,41,25}, {33,20,16}, {43,7,44}, {42,40,22},
        // {22,8,47}, {15,17,12}, {34,0,22}, {44,20,17}, {44,28,30}, {19,3,25},
        // {22,19,21}, {4,1,25}, {43,6,24}, {47,6,28}, {43,18,11}, {10,39,37},
        // {31,42,24}, {32,45,43}, {32,46,37}, {6,14,3}, {36,24,4}, {49,33,6},
        // {0,23,33}, {42,5,31}, {33,20,38}, {23,45,15}, {1,2,41}, {38,17,6}, {16,0,45},
        // {6,1,18}, {18,15,45}, {22,27,11}, {5,32,18}, {9,15,44}, {36,23,30},
        // {25,34,6}, {31,23,45}, {47,49,40}, {37,3,26}, {46,38,21}, {2,1,13},
        // {25,18,46}, {8,24,40}, {41,27,5}, {22,41,24}, {48,45,17}, {13,1,12},
        // {17,29,38}, {33,48,27}, {34,14,6}, {8,6,23}, {30,47,17}, {26,16,41},
        // {35,34,49}, {35,26,8}, {5,19,24}, {26,16,31}, {47,18,33}, {18,2,38},
        // {29,39,41}, {45,2,26}, {26,40,20}, {25,10,40}, {32,45,18}, {3,35,33},
        // {34,33,11}, {29,21,23}, {38,21,37}, {40,34,12}, {10,26,10}};
        // int passingFees6[] = new int[] {
        // 739,253,35,162,36,67,339,714,242,67,940,483,860,408,131,36,500,234,659,617,62,411,697,505,285,114,910,257,353,393,980,350,53,668,100,159,607,170,288,766,477,913,80,92,539,603,47,471,201,916
        // };
        // System.out.println(m.minCost(maxTime6, edges6, passingFees6));
    }

    private static final int INFINITY = Integer.MAX_VALUE >> 1;

    public int minCost(int maxTime, int[][] edges, int[] passingFees) {
        int n = passingFees.length;
        int[][] dp = new int[maxTime + 1][n];
        for (int i = 0; i < maxTime + 1; i++) {
            Arrays.fill(dp[i], INFINITY);
        }
        dp[0][0] = passingFees[0];

        for (int t = 1; t < maxTime + 1; t++) {
            for (int[] e : edges) {
                int i = e[0], j = e[1], cost = e[2];
                if (cost <= t) {
                    dp[t][i] = Math.min(dp[t][i], dp[t - cost][j] + passingFees[i]);
                    dp[t][j] = Math.min(dp[t][j], dp[t - cost][i] + passingFees[j]);
                }
            }
        }
        int ans = INFINITY;
        for (int t = 1; t < maxTime + 1; t++) {
            ans = Math.min(ans, dp[t][n - 1]);
        }
        return ans == INFINITY ? -1 : ans;
    }

    public int minCostI(int maxTime, int[][] edges, int[] passingFees) {
        int n = passingFees.length;
        Set<Integer>[] graph = new HashSet[n];
        Map<Integer, Integer> times = new HashMap<>();
        for (int i = 0; i < n; i++) {
            graph[i] = new HashSet<>();
        }
        for (int[] e : edges) {
            if (e[0] != 0) {
                if (graph[e[1]].add(e[0])) {
                    times.put(e[0] + e[1] * n, e[2]);
                } else {
                    int k = e[0] + e[1] * n;
                    times.put(k, Math.min(e[2], times.get(k)));
                }
            }

            if (e[1] != 0) {
                if (graph[e[0]].add(e[1])) {
                    times.put(e[0] * n + e[1], e[2]);
                } else {
                    int k = e[0] * n + e[1];
                    times.put(k, Math.min(e[2], times.get(k)));
                }
            }
        }
        Set<Integer> visited = new HashSet<>();
        visited.add(0);
        int[] res = new int[1];
        res[0] = Integer.MAX_VALUE;
        int[] subRes = new int[2];
        subRes[0] = passingFees[0];
        dfs(graph, times, maxTime, passingFees, 0, visited, res, n, subRes, 0);
        return res[0] == Integer.MAX_VALUE ? -1 : res[0];
    }

    void dfs(Set<Integer>[] graph, Map<Integer, Integer> times,
            int maxTimes, int[] passingFees, int s, Set<Integer> visited, int[] res, int n, int[] subSet, int cnt) {
        if (res[0] < subSet[0] || subSet[1] > maxTimes) {
            return;
        }
        if (s == n - 1) {
            if (res[0] > subSet[0]) {
                res[0] = subSet[0];
            }
            return;
        }
        Set<Integer> childs = graph[s];
        for (int cInd : childs) {
            if (!visited.contains(cInd)) {
                visited.add(cInd);
                int pFee = passingFees[cInd], spendTime = times.get(s * n + cInd);
                subSet[0] += pFee;
                subSet[1] += spendTime;
                dfs(graph, times, maxTimes, passingFees, cInd, visited, res, n, subSet, cnt + 1);
                subSet[0] -= pFee;
                subSet[1] -= spendTime;
                visited.remove(cInd);
            }
        }
    }
}
