package com.algorithm.contest.weeklycontest219;

import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.TreeMap;

/**
 * https://leetcode-cn.com/problems/maximum-height-by-stacking-cuboids/
 * #1691. 堆叠长方体的最大高度
 *
 * 给你 n 个长方体 cuboids ，其中第 i 个长方体的长宽高表示为 cuboids[i] = [widthi, lengthi, heighti]（下标从 0 开始）。请你从 cuboids 选出一个 子集 ，并将它们堆叠起来。
 *
 * 如果 widthi <= widthj 且 lengthi <= lengthj 且 heighti <= heightj ，你就可以将长方体 i 堆叠在长方体 j 上。你可以通过旋转把长方体的长宽高重新排列，以将它放在另一个长方体上。
 *
 * 返回 堆叠长方体 cuboids 可以得到的 最大高度 。
 *  
 *
 * 示例 1：
 * 输入：cuboids = [[50,45,20],[95,37,53],[45,23,12]]
 * 输出：190
 * 解释：
 * 第 1 个长方体放在底部，53x37 的一面朝下，高度为 95 。
 * 第 0 个长方体放在中间，45x20 的一面朝下，高度为 50 。
 * 第 2 个长方体放在上面，23x12 的一面朝下，高度为 45 。
 * 总高度是 95 + 50 + 45 = 190 。
 *
 * 示例 2：
 * 输入：cuboids = [[38,25,45],[76,35,3]]
 * 输出：76
 * 解释：
 * 无法将任何长方体放在另一个上面。
 * 选择第 1 个长方体然后旋转它，使 35x3 的一面朝下，其高度为 76 。
 *
 * 示例 3：
 * 输入：cuboids = [[7,11,17}, {7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]
 * 输出：102
 * 解释：
 * 重新排列长方体后，可以看到所有长方体的尺寸都相同。
 * 你可以把 11x7 的一面朝下，这样它们的高度就是 17 。
 * 堆叠长方体的最大高度为 6 * 17 = 102 。
 *  
 *
 * 提示：
 * n == cuboids.length
 * 1 <= n <= 100
 * 1 <= widthi, lengthi, heighti <= 100
 *
 */
public class MaxHeight {

    public static void main(String[] args) {

        MaxHeight m = new MaxHeight();
//        int[][] cuboids = new int[][] { { 50, 45, 20 }, { 95, 37, 53 }, { 45, 23, 12 } };
//        System.out.println(m.maxHeight(cuboids));

//        int[][] cuboids2 = new int[][] { { 38, 25, 45 }, { 76, 35, 3 } };
//        System.out.println(m.maxHeight(cuboids2));
//
//        int[][] cuboids3 = new int[][] { {7,11,17}, {7,17,11}, {11,7,17}, {11,17,7}, {17,7,11}, {17,11,7}};
//        System.out.println(m.maxHeight(cuboids3));

//        int[][] cuboids4 = new int[][] { {1,7,20}, {2,6,20}};
//        System.out.println(m.maxHeight(cuboids4));

//        int[][] cuboids5 = new int[][] { {29,59,36}, {12,13,97}, {49,86,43}, {9,57,50}, {97,19,10}, {17,92,69}, {92,36,15}, {16,63,8}, {94,24,78}, {52,11,39}, {48,61,57}, {15,44,79}, {6,69,98}, {30,70,41}, {23,17,33}, {85,86,12}, {13,75,98}, {75,30,30}, {89,18,27}, {94,83,81}};
//        System.out.println(m.maxHeight(cuboids5));//435

//        int[][] cuboids6 = new int[][] { {92,47,83}, {75,20,87}, {68,12,83}, {12,85,15}, {16,24,47}, {69,65,35}, {96,56,93}, {89,93,11}, {86,20,41}, {69,77,12}, {83,80,97}, {90,22,36}};
//        System.out.println(m.maxHeight(cuboids6));//447


        int[][] cuboids7 = new int[][] { {57,59,81}, {30,52,47}, {21,44,55}, {39,78,75}, {26,70,100}, {99,70,60}, {79,72,82}, {12,54,50}, {34,20,22}, {64,26,25}, {5,12,50}, {82,13,37}, {64,44,43}, {30,50,68}, {98,69,84}, {40,67,79}, {79,83,53}, {28,12,92}, {99,100,16}, {60,17,55}, {75,86,17}, {71,98,7}, {61,48,94}, {70,3,76}, {62,22,30}, {24,98,74}, {12,5,73}, {62,47,85}, {95,29,93}, {47,59,83}, {74,98,13}, {82,53,69}, {85,93,51}, {100,80,17}, {8,8,3}, {52,11,39}, {83,89,46}, {83,59,47}, {66,82,42}, {88,64,33}, {71,68,87}, {77,84,28}, {75,71,80}, {38,22,42}, {67,44,31}, {12,57,39}, {24,5,88}, {20,49,25}, {45,60,37}, {35,19,28}, {75,93,57}, {82,14,77}, {78,87,17}, {50,22,30}, {91,78,71}, {30,87,21}, {89,66,17}, {63,23,75}, {12,20,2}, {39,93,56}, {90,78,24}, {61,88,85}, {65,66,59}, {31,21,4}, {81,88,14}, {15,32,97}, {15,44,64}, {69,18,92}, {8,52,56}, {61,45,19}, {83,93,24}, {45,9,47}, {8,20,9}, {18,71,77}, {21,88,19}, {38,40,64}, {79,67,71}, {36,24,60}, {11,49,58}, {89,49,70}, {73,38,67}, {40,75,88}, {72,92,55}, {90,2,96}, {40,62,33}, {47,4,87}, {99,8,59}, {75,11,15}, {50,28,87}};
        System.out.println(m.maxHeight(cuboids7)); //1059
    }
    public int maxHeight(int[][] cuboids) {
        int n = cuboids.length;
        for (int i = 0; i < n; i++) {
            Arrays.sort(cuboids[i]);
        }
        Arrays.sort(cuboids, (a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);

        int[] dp = new int[n];
        int cnt = dp[0];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (cuboids[j][0] <= cuboids[i][0] && cuboids[j][1] <= cuboids[i][1]
                        && cuboids[j][2] <= cuboids[i][2]) {
                    if (dp[i] < dp[j]) {
                        dp[i] = dp[j];
                    }
                }
            }
            dp[i] += cuboids[i][2];
            if (cnt < dp[i]) {
                cnt = dp[i];
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(Arrays.toString(cuboids[i]));
            System.out.println(" " + dp[i]);
        }
        return cnt;
    }
}
